# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

variables:
  # Comes with pre installed dev tools
  # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
  #imageName: 'ubuntu-22.04' # does not work with this label
  imageName: 'ubuntu-latest' 
  
  containerRegistryServiceConnection: azure_spring_boot_docker_hub_service_connection
  imageRepository: bomc/azure-spring-boot 
  tag: $(Build.BuildId)

trigger:
- main # Every commit to main will be trigger to run this pipeline.

pool:
  vmImage: $(imagename)

steps:
  - task: ShellScript@2
    displayName: 'Check azure image environment'
    inputs:
      scriptPath: check-az-env.sh

  - task: Maven@3
    displayName: Compile and build java app
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx2048m'
      javaHomeOption: 'JDKVersion' # Sets JAVA_HOME either by selecting a JDK Version or by mannually entering a JDK path.
      jdkVersionOption: '1.17'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'package'

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: "JUnit"
      mergeTestResults: true # Optional
  - task: PublishCodeCoverageResults@1
    displayName: "Publish publish code coverage"
    inputs:
      summaryFileLocation: $(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml
      pathToSources: $(System.DefaultWorkingDirectory)/src/main/java/

  - task: Maven@3
    displayName: Build Docker image
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'spring-boot:build-image'
      publishJunitResult: false
      javaHomeOption: 'JDKVersion' # Sets JAVA_HOME either by selecting a JDK Version or by mannually entering a JDK path.
      jdkVersionOption: '1.17'
      mavenOptions: '-Dspring-boot.build-image.imageName=docker.io/$(imageRepository):$(tag)'

  - task: Docker@2
    displayName: 'Push Docker Image to Dockerhub'
    inputs:
      containerRegistry: $(containerRegistryServiceConnection)
      repository: $(imageRepository)
      command: 'push'
      tags: $(tag)
